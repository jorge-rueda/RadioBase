{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","data","setData","useState","searchTerm","setSearchTerm","tableContainerRef","useRef","useEffect","fetchData","axios","get","params","then","response","catch","error","console","dates","length","Object","keys","traffic","scrollTable","direction","container","current","scrollBy","left","behavior","React","createElement","className","src","alt","type","placeholder","value","onChange","event","target","FontAwesomeIcon","icon","faSearch","onClick","faArrowLeft","faArrowRight","ref","map","date","key","dateStr","Date","options","weekday","month","day","year","toLocaleDateString","formatDate","radiobase","name","undefined","reportWebVitals","onPerfEntry","Function","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"iQAkIeA,MA5HHA,KACR,MAAOC,EAAMC,GAAWC,mBAAS,KAC1BC,EAAYC,GAAiBF,mBAAS,IACvCG,EAAoBC,iBAAO,MAGjCC,oBAAU,KACNC,EAAUL,IACX,CAACA,IAGJ,MAAMK,EAAaL,IACfM,IAAMC,IAAI,uCAAwC,CAC9CC,OAAQ,CAAER,gBAEbS,KAAKC,GAAYZ,EAAQY,EAASb,OAClCc,MAAMC,GAASC,QAAQD,MAAM,uBAAwBA,KAyBpDE,EAAQjB,EAAKkB,OAASC,OAAOC,KAAKpB,EAAK,GAAGqB,SAAW,GAGrDC,EAAeC,IACjB,MAAMC,EAAYnB,EAAkBoB,QAGlB,SAAdF,EACAC,EAAUE,SAAS,CAAEC,MAHJ,IAGyBC,SAAU,WAC/B,UAAdL,GACPC,EAAUE,SAAS,CAAEC,KALJ,IAKwBC,SAAU,YAS3D,OACIC,IAAAC,cAAA,OAAKC,UAAU,OACXF,IAAAC,cAAA,UAAQC,UAAU,UACdF,IAAAC,cAAA,OAAKC,UAAU,oBACXF,IAAAC,cAAA,UAAI,gEACJD,IAAAC,cAAA,WACID,IAAAC,cAAA,OAAKE,IAAI,mBAAmBD,UAAU,OAAOE,IAAI,YAM7DJ,IAAAC,cAAA,OAAKC,UAAU,oBACXF,IAAAC,cAAA,OAAKC,UAAU,cACXF,IAAAC,cAAA,SACII,KAAK,OACLC,YAAY,0BACZC,MAAOjC,EACPkC,SAtBQC,IACxBlC,EAAckC,EAAMC,OAAOH,QAsBXL,UAAU,iBAEdF,IAAAC,cAAA,UAAQC,UAAU,iBACdF,IAAAC,cAACU,IAAe,CAACC,KAAMC,SAMnCb,IAAAC,cAAA,OAAKC,UAAU,iBACXF,IAAAC,cAAA,OAAKC,UAAU,qBACXF,IAAAC,cAAA,UAAQa,QAASA,IAAMrB,EAAY,QAASS,UAAU,mBAClDF,IAAAC,cAACU,IAAe,CAACC,KAAMG,OAE3Bf,IAAAC,cAAA,UAAQa,QAASA,IAAMrB,EAAY,SAAUS,UAAU,mBACnDF,IAAAC,cAACU,IAAe,CAACC,KAAMI,QAG/BhB,IAAAC,cAAA,OAAKC,UAAU,kBAAkBe,IAAKzC,GAClCwB,IAAAC,cAAA,aACID,IAAAC,cAAA,aACID,IAAAC,cAAA,UACID,IAAAC,cAAA,UAAI,cACHb,EAAM8B,IAAIC,GAAQnB,IAAAC,cAAA,MAAImB,IAAKD,GAzEpCE,KAChB,IACI,MAAMF,EAAO,IAAIG,KAAKD,GAChBE,EAAU,CAAEC,QAAS,QAASC,MAAO,QAASC,IAAK,UAAWC,KAAM,WAC1E,OAAOR,EAAKS,mBAAmB,QAASL,GAC1C,MAAOrC,GAEL,OADAC,QAAQD,MAAM,yBAA0BA,GACjCmC,IAkEgDQ,CAAWV,OAGtDnB,IAAAC,cAAA,aACK9B,EAAK+C,IAAKY,GACP9B,IAAAC,cAAA,MAAImB,IAAKU,EAAUC,MACf/B,IAAAC,cAAA,UAAK6B,EAAUC,MACd3C,EAAM8B,IAAIC,IACPnB,WAAAC,cAAA,MAAImB,IAAKD,EAAMjB,WA1FjCK,EA0FqDuB,EAAUtC,QAAQ2B,QAzFvEa,IAAVzB,EAA4B,OAC5BA,GAAS,GAAW,MACpBA,EAAQ,IAAMA,GAAS,GAAW,SAClCA,EAAQ,IAAMA,GAAS,GAAW,SAClCA,EAAQ,GAAW,aAAvB,IAsFqCuB,EAAUtC,QAAQ2B,IAAS,IA3FlDZ,gBCdP0B,MAZSC,IAClBA,GAAeA,aAAuBC,UACxC,6BAAqBpD,KAAKqD,IAAkD,IAAjD,OAAEC,EAAM,OAAEC,EAAM,OAAEC,EAAM,OAAEC,EAAM,QAAEC,GAASL,EACpEC,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,MCDDQ,IAASC,WAAWC,SAASC,eAAe,SACpDC,OACH9C,IAAAC,cAACD,IAAM+C,WAAU,KACf/C,IAAAC,cAAC/B,EAAG,QAOR+D,M","file":"static/js/main.69225109.chunk.js","sourcesContent":["import React, { useEffect, useState, useRef } from 'react';\nimport axios from 'axios';\nimport './App.css';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faSearch, faArrowLeft, faArrowRight } from '@fortawesome/free-solid-svg-icons';\n\nconst App = () => {\n    const [data, setData] = useState([]); \n    const [searchTerm, setSearchTerm] = useState('');  \n    const tableContainerRef = useRef(null);  \n\n    // Hook para obtener datos cuando cambia el término de búsqueda\n    useEffect(() => {\n        fetchData(searchTerm);\n    }, [searchTerm]);\n\n    // Función para obtener datos de la API\n    const fetchData = (searchTerm) => {\n        axios.get('http://localhost:3000/api/radiobases', {\n            params: { searchTerm }\n        })\n        .then(response => setData(response.data))\n        .catch(error => console.error('Error fetching data:', error));\n    };\n\n    // Función para determinar el color de la celda basado en el valor\n    const getColor = (value) => {\n        if (value === undefined) return 'grey';\n        if (value <= 15) return 'red';\n        if (value > 15 && value <= 40) return 'orange';\n        if (value > 40 && value <= 90) return 'yellow';\n        if (value > 90) return 'green';\n    };\n\n    // Función para formatear la fecha en español\n    const formatDate = (dateStr) => {\n        try {\n            const date = new Date(dateStr);\n            const options = { weekday: 'short', month: 'short', day: '2-digit', year: 'numeric' };\n            return date.toLocaleDateString('es-MX', options);\n        } catch (error) {\n            console.error('Error formatting date:', error);\n            return dateStr;\n        }\n    };\n\n    // Obtener las fechas de los datos\n    const dates = data.length ? Object.keys(data[0].traffic) : [];\n\n    // Función para desplazar la tabla horizontalmente\n    const scrollTable = (direction) => {\n        const container = tableContainerRef.current;\n        const scrollAmount = 200;\n\n        if (direction === 'left') {\n            container.scrollBy({ left: -scrollAmount, behavior: 'smooth' });\n        } else if (direction === 'right') {\n            container.scrollBy({ left: scrollAmount, behavior: 'smooth' });\n        }\n    };\n\n    // Manejar el cambio en el campo de búsqueda\n    const handleSearchChange = (event) => {\n        setSearchTerm(event.target.value);\n    };\n\n    return (\n        <div className=\"App\">\n            <header className=\"navbar\">\n                <div className=\"navbar-container\">\n                    <h1>Gerencia Corporativa de Ingeniería y Planeación de RAN</h1>\n                    <nav>\n                        <img src=\"/images/logo.png\" className=\"logo\" alt=\"Logo\"/>\n                    </nav>\n                </div>\n            </header>\n            \n            {/* Contenedor de búsqueda */}\n            <div className=\"search-container\">\n                <div className=\"search-box\">\n                    <input\n                        type=\"text\"\n                        placeholder=\"Buscar por radiobase...\"\n                        value={searchTerm}\n                        onChange={handleSearchChange}\n                        className=\"search-input\"\n                    />\n                    <button className=\"search-button\">\n                        <FontAwesomeIcon icon={faSearch} />\n                    </button>\n                </div>\n            </div>\n\n            {/* Contenedor de la tabla con controles de carrusel */}\n            <div className=\"table-wrapper\">\n                <div className=\"carousel-controls\">\n                    <button onClick={() => scrollTable('left')} className=\"carousel-button\">\n                        <FontAwesomeIcon icon={faArrowLeft} />\n                    </button>\n                    <button onClick={() => scrollTable('right')} className=\"carousel-button\">\n                        <FontAwesomeIcon icon={faArrowRight} />\n                    </button>\n                </div>\n                <div className=\"table-container\" ref={tableContainerRef}>\n                    <table>\n                        <thead>\n                            <tr>\n                                <th>Radiobases</th>\n                                {dates.map(date => <th key={date}>{formatDate(date)}</th>)}\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {data.map((radiobase) => (\n                                <tr key={radiobase.name}>\n                                    <td>{radiobase.name}</td>\n                                    {dates.map(date => (\n                                        <td key={date} className={getColor(radiobase.traffic[date])}>\n                                            {radiobase.traffic[date] || ''}\n                                        </td>\n                                    ))}\n                                </tr>\n                            ))}\n                        </tbody>\n                    </table>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}